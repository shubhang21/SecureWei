Compilation warnings/errors on input.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> input.sol

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
 --> input.sol:6:3:
  |
6 |   constructor() public{
  |   ^ (Relevant source part starts here and spans across multiple lines).

Warning: Function state mutability can be restricted to pure
  --> input.sol:25:5:
   |
25 |     function supportsToken() external returns(bytes32) {
   |     ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:[93m
Reentrancy in ModifierEntrancy.airDrop() (input.sol#10-12):
	External calls:
	- supportsToken() (input.sol#10)
		- require(bool)(keccak256(bytes)(abi.encodePacked(Nu Token)) == bank.supportsToken()) (input.sol#15)
	State variables written after the call(s):
	- tokenBalance[msg.sender] += 20 (input.sol#11)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Pragma version^0.8 (input.sol#1) is too complex
solc-0.8.5 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
ModifierEntrancy.name (input.sol#4) is never used in ModifierEntrancy (input.sol#2-23)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
airDrop() should be declared external:
	- ModifierEntrancy.airDrop() (input.sol#10-12)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:input.sol analyzed (2 contracts with 75 detectors), 5 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m
